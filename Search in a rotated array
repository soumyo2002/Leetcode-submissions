Link to the problem:https://leetcode.com/problems/search-in-rotated-sorted-array/

Code:
class Solution {
    public int peak(int[] a,int n){
        int start=0,end=n-1;
        
        while(start<=end){
            int mid=(start+(end-start)/2);
            if(mid<end && a[mid]>a[mid+1])
                return mid;
            if(mid>start && a[mid]<a[mid-1])
                return mid-1;
            if(a[mid]>=a[start])
                start=mid+1;
            else
                end=mid-1;
        }
        return -1;
    }
    public int bin_search(int[] a,int target,int start,int end){
        
        while(start<=end){
            int mid=(start+(end-start)/2);
            if(a[mid]>target)
                end=mid-1;
            else if(a[mid]<target)
                start=mid+1;
            else
                return mid;
        }
        return -1;
    }
    public int search(int[] nums, int target) {
        int len=nums.length;
        int index=peak(nums,len);
        if(index==-1)
            return(bin_search(nums,target,0,len-1));
        
        else if(nums[index]==target)
            return index;
        
        else if(target>=nums[0]){
        int first_try=bin_search(nums,target,0,index-1);
            return first_try;
        }
        
        else{
            int second_try=bin_search(nums,target,index+1,len-1);
            return(second_try);
        }
    }
}
